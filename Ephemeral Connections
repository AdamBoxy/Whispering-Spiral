<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Ephemeral Connections</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background: #050508; /* Slightly deeper blue-black */
      overflow: hidden;
      height: 100%;
      cursor: crosshair; /* Suggests interaction potential */
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
<canvas id="canvas"></canvas>
<script>
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  let particles = [];
  const mouse = { x: null, y: null, radius: 150 }; // Interaction radius

  const config = {
    particleCount: 100,
    maxLife: 120,       // Time steps before fading starts
    fadeLife: 80,        // Time steps to fade out completely
    baseSpeed: 0.6,
    connectionDistance: 100,
    baseHue: 200,       // Base color (cool blue/cyan)
    mouseInfluence: 0.03 // How much mouse pushes particles
  };

  // --- Particle Class ---
  class Particle {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.vx = (Math.random() - 0.5) * config.baseSpeed * 2;
      this.vy = (Math.random() - 0.5) * config.baseSpeed * 2;
      this.life = config.maxLife + config.fadeLife;
      this.baseHue = config.baseHue + Math.random() * 60 - 30; // Color variation
    }

    update() {
      // Mouse interaction - gentle push away
      if (mouse.x !== null) {
        const dx = this.x - mouse.x;
        const dy = this.y - mouse.y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < mouse.radius) {
          const force = (1 - dist / mouse.radius) * config.mouseInfluence;
          this.vx += (dx / dist) * force;
          this.vy += (dy / dist) * force;
          // Apply some friction/damping due to interaction
          this.vx *= 0.98;
          this.vy *= 0.98;
        }
      }

      // Move
      this.x += this.vx;
      this.y += this.vy;

      // Bounce off edges softly
      if (this.x < 0 || this.x > canvas.width) this.vx *= -0.95;
      if (this.y < 0 || this.y > canvas.height) this.vy *= -0.95;

      // Dampen velocity slightly over time
      this.vx *= 0.995;
      this.vy *= 0.995;

      this.life--;
    }

    draw() {
      let alpha = 1;
      if (this.life < config.fadeLife) {
        alpha = this.life / config.fadeLife;
      }
      if (alpha <= 0) return;

      ctx.beginPath();
      ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
      // Fade to white at the end? Or just fade out? Let's fade out.
      // Optional: Make brighter when near mouse?
      ctx.fillStyle = `hsla(${this.baseHue}, 80%, 70%, ${alpha * 0.8})`;
      ctx.fill();
    }
  }

  // --- Animation Logic ---
  function handleParticles() {
    // Add new particles gradually
    if (particles.length < config.particleCount && Math.random() > 0.8) {
       particles.push(new Particle());
    }

    // Update and draw existing particles
    for (let i = particles.length - 1; i >= 0; i--) {
      particles[i].update();
      particles[i].draw();
      if (particles[i].life <= 0) {
        particles.splice(i, 1); // Remove dead particles
      }
    }
  }

  function drawConnections() {
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const p1 = particles[i];
        const p2 = particles[j];
        const dx = p1.x - p2.x;
        const dy = p1.y - p2.y;
        const dist = Math.sqrt(dx * dx + dy * dy);

        if (dist < config.connectionDistance) {
          // Calculate alpha based on particle life and distance
          let alpha1 = (p1.life < config.fadeLife) ? (p1.life / config.fadeLife) : 1;
          let alpha2 = (p2.life < config.fadeLife) ? (p2.life / config.fadeLife) : 1;
          let connectionAlpha = Math.min(alpha1, alpha2) * (1 - dist / config.connectionDistance);

          if (connectionAlpha > 0.01) { // Only draw if somewhat visible
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            // Use average hue? Or fixed connection color? Let's try slightly different hue
            const avgHue = (p1.baseHue + p2.baseHue) / 2;
            ctx.strokeStyle = `hsla(${avgHue}, 80%, 60%, ${connectionAlpha * 0.5})`; // Make lines subtler
            ctx.lineWidth = 1;
            ctx.stroke();
          }
        }
      }
    }
  }

  function animate() {
    // Fade the background
    ctx.fillStyle = 'rgba(5, 5, 8, 0.1)'; // Slow fade
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    handleParticles();
    drawConnections();

    requestAnimationFrame(animate);
  }

  // --- Event Listeners ---
  window.addEventListener('mousemove', (e) => {
    mouse.x = e.clientX;
    mouse.y = e.clientY;
  });

  window.addEventListener('mouseleave', () => {
    mouse.x = null;
    mouse.y = null;
  });

   window.addEventListener('touchstart', (e) => {
     if (e.touches.length > 0) {
       mouse.x = e.touches[0].clientX;
       mouse.y = e.touches[0].clientY;
     }
   }, { passive: true }); // Use passive for better scroll performance if needed

   window.addEventListener('touchmove', (e) => {
      if (e.touches.length > 0) {
        mouse.x = e.touches[0].clientX;
        mouse.y = e.touches[0].clientY;
      }
   }, { passive: true });

   window.addEventListener('touchend', () => {
     mouse.x = null;
     mouse.y = null;
   });

  window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    // No need to re-init particles, they adapt to new space
  });

  // --- Start ---
  animate();

</script>
</body>
</html>
